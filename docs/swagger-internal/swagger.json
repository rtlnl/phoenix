{
  "openapi": "3.0.0",
  "info": {
    "title": "RTL-DI Personalization APIs",
    "description": "This is the RESTful APIs of RTL Personalization models",
    "version": "1.0.0"
  },
  "paths": {
    "/healthz": {
      "get": {
        "summary": "Checks if the API is alive",
        "description": "Helpfull endpoint for testing if the API is exposed correctly",
        "responses": {
          "200": {
            "description": "I'm healthy"
          }
        }
      }
    },
    "/docs": {
      "get": {
        "summary": "Gets the swagger definition",
        "description": "It returns this file showing the endpoints available",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/streaming": {
      "post": {
        "summary": "Insert one record",
        "description": "This request will allow the client to upload one single entry into the model",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StreamingRequest"
              }
            }
          },
          "description": "Object describing the model to target and the data to upload",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Data uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StreamingResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404": {
            "description": "Model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "500": {
            "description": "Could not upload data to the model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update one record",
        "description": "This request will allow the client to update one single entry into the model",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StreamingRequest"
              }
            }
          },
          "description": "Object describing the model to target and the data to update",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Data uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StreamingResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404": {
            "description": "Model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "500": {
            "description": "Could not update data to the model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete one record",
        "description": "This request will allow the client to delete one single entry of the model",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StreamingRequest"
              }
            }
          },
          "description": "Object describing the model to target and the data to delete",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Data uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StreamingResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404": {
            "description": "Model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "500": {
            "description": "Could not delete data to the model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/batch": {
      "post": {
        "summary": "Upload data from either a file or a location",
        "description": "This endpoints allow the client to upload more records in two different way. Either using the payload itself or a S3 location",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchRequest"
              }
            }
          },
          "description": "Payload describing the model to target and the data to upload",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Data uploaded correctly",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404": {
            "description": "Model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "500": {
            "description": "Prediction model couldn't work properly",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/management/model": {
      "post": {
        "summary": "Manage the creation of models",
        "description": "Allows to create new models in the database",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagementModelRequest"
        },
        "responses": {
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Creation of the model couldn't work properly"
          }
        }
      },
      "get": {
        "summary": "It returns a model",
        "description": "It returns a model that has been created in the past",
        "parameters": [
          {
            "in": "query",
            "name": "publicationPoint",
            "description": "Publication Point name of the model",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "campaign",
            "description": "Campaign name of the model",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Model not found"
          },
          "500": {
            "description": "Get of the model couldn't work properly"
          }
        }
      },
      "delete": {
        "summary": "Deletes a model",
        "description": "It deletes a model that has been created in the past",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagementModelRequest"
        },
        "responses": {
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Model not found"
          },
          "500": {
            "description": "Get of the model couldn't work properly"
          }
        }
      }
    },
    "/management/model/publish": {
      "post": {
        "summary": "Manage the publications of models",
        "description": "Allows to publish a model",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagementModelRequest"
        },
        "responses": {
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Model not found"
          },
          "500": {
            "description": "Creation of the model couldn't work properly"
          }
        }
      }
    },
    "/management/model/stage": {
      "post": {
        "summary": "Manage the staging of models",
        "description": "Allows to stage a model that has been previously published",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagementModelRequest"
        },
        "responses": {
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Model not found"
          },
          "500": {
            "description": "Creation of the model couldn't work properly"
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://personalization-dev.rtl-di.nl/"
    },
    {
      "url": "https://personalization-prod.rtl-di.nl/"
    }
  ],
  "components": {
    "requestBodies": {
      "ManagementModelRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagementModelRequest"
            }
          }
        },
        "description": "Model metadata",
        "required": true
      }
    },
    "schemas": {
      "StreamingRequest": {
        "type": "object",
        "properties": {
          "publicationPoint": {
            "description": "Name of the publication point where the model will be placed",
            "example": "rtl_news",
            "type": "string"
          },
          "campaign": {
            "description": "Campaign name used during the creation of the model",
            "example": "homepage",
            "type": "string"
          },
          "signal": {
            "description": "Signal value used for uploading the recommended items",
            "example": 123456,
            "type": "string"
          },
          "recommendations": {
            "description": "Recommended items for the particular signal",
            "example": "[\"item1\",\"item2\",\"item3\"]",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "publicationPoint",
          "campaign",
          "signal",
          "recommendations"
        ]
      },
      "StreamingResponse": {
        "type": "object",
        "properties": {
          "message": {
            "description": "message of the action just taken",
            "type": "string"
          }
        }
      },
      "BatchRequest": {
        "type": "object",
        "properties": {
          "publicationPoint": {
            "description": "Name of the publication point where the model will be placed",
            "example": "rtl_news",
            "type": "string"
          },
          "campaign": {
            "description": "Campaign name used during the creation of the model",
            "example": "homepage",
            "type": "string"
          },
          "dataLocation": {
            "description": "S3 location where to fetch the CSV file",
            "example": "s3://my-bucket/foo/bar.csv",
            "type": "string"
          },
          "data": {
            "description": "Recommended items for the particular signal",
            "example": "[{\"12\": [\"3\", \"4\", \"5\"]},{\"13\": [\"5\",\"6\", \"7\"]}]",
            "items": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        },
        "required": [
          "publicationPoint",
          "campaign"
        ]
      },
      "BatchResponse": {
        "type": "object",
        "properties": {
          "message": {
            "description": "message of the action just taken",
            "type": "string"
          }
        }
      },
      "ManagementModelRequest": {
        "type": "object",
        "properties": {
          "publicationPoint": {
            "description": "Name of the publication point",
            "example": "rtl_nieuws",
            "type": "string"
          },
          "campaign": {
            "description": "Name of the campaign",
            "example": "homepage",
            "type": "string"
          },
          "signalOrder": {
            "description": "Order of the signals to used for this model",
            "example": "articleID_userID",
            "type": "string"
          }
        },
        "required": [
          "publicationPoint",
          "campaign",
          "signalOrder"
        ]
      },
      "ResponseError": {
        "type": "object",
        "properties": {
          "message": {
            "description": "Error message of the failed operation",
            "example": "Key pizza doesn't exist",
            "type": "string"
          }
        }
      }
    }
  }
}